let mongoose,Schema,bcrypt,jwt;_ebf‍.x([["default",()=>_ebf‍.o]]);_ebf‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}],["Schema",["Schema"],function(v){Schema=v}]]);_ebf‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_ebf‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);



const UserSchema = new Schema( {
    username : String,
    hashedPassword: String,
});

UserSchema.methods.setPassword = async function(password) {
    const hash = await bcrypt.hash(password, 10);
    this.hashedPassword = hash;
}
UserSchema.methods.checkPassword = async function(password) {
    const result = await bcrypt.compare(password, this.hashedPassword);
    return result; //true / false
}

UserSchema.statics.findByUsername = function(username) {
    return this.findOne({username})
}

UserSchema.methods.serialize = function() {
    const data = this.toJSON();
    delete data.hashedPassword;
    return data;
}

UserSchema.methods.generateToken = function() {
    const token = jwt.sign(
        //첫 번째 파라미터에는 토근 안에 집어 넣고 싶은 데이터를 넣습니다. 
        {
            _id: this.id,
            username: this.username,
        },
        process.env.JWT_SECRET, //두번째 파라미터에는 JWT 암호를 넣습니다. 
        {
            expiresIn : '7d',
        }
        
    )
    return token;
}
const User = mongoose.model('User', UserSchema);
_ebf‍.d(User);

